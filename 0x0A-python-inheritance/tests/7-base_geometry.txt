Using class ``BaseGeometry``
-----------------------

Class BaseGeometry contains functions that validates given parameters
Currently contains function area(): not implemented
Currently contains function integer_validator(name, value):
  - Validates `value` if it is an integer
  - Returns nothing if True

First import class ``BaseGeometry``

    >>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

Now use it:

Function area():
    >>> bg = BaseGeometry()
    >>> bg.area()
    Traceback (most recent call last):
    ...
    Exception: area() is not implemented

Function integer_validator basic usage:
    >>> bg.integer_validator("alx", 98)

Function integer_validator 0 input usage:
    >>> bg.integer_validator("alx", 0)
    Traceback (most recent call last):
    ...
    ValueError: alx must be greater than 0

Function integer_validator negative input usage:
    >>> bg.integer_validator("alx", -1)
    Traceback (most recent call last):
    ...
    ValueError: alx must be greater than 0

Function integer_validator non int input usage:
    >>> bg.integer_validator("alx", "school")
    Traceback (most recent call last):
    ...
    TypeError: alx must be an integer

Function integer_validator infinity input usage:
    >>> bg.integer_validator("alx", float("inf"))
    Traceback (most recent call last):
    ...
    TypeError: alx must be an integer

Function integer_validator large int input usage:
    >>> bg.integer_validator("alx", 9999999999999999999999999)

Function integer_validator float input usage:
    >>> bg.integer_validator("alx", 90.8)
    Traceback (most recent call last):
    ...
    TypeError: alx must be an integer

Function integer_validator list usage:
    >>> bg.integer_validator("alx", [90])
    Traceback (most recent call last):
    ...
    TypeError: alx must be an integer

Function integer_validator no input usage:
    >>> bg.integer_validator()
    Traceback (most recent call last):
    ...
    TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'
